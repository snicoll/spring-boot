plugins {
	id "java-library"
	id "org.jetbrains.kotlin.jvm"
	id "org.springframework.boot.deployed"
	id "org.springframework.boot.optional-dependencies"
}

description = "Spring Boot Test"

dependencies {
	api(project(":spring-boot-project:spring-boot"))
	api("org.springframework:spring-test")

	optional("com.fasterxml.jackson.core:jackson-databind")
	optional("com.google.code.gson:gson")
	optional("com.jayway.jsonpath:json-path")
	optional("io.projectreactor.netty:reactor-netty-http")
	optional("jakarta.json.bind:jakarta.json.bind-api")
	optional("jakarta.servlet:jakarta.servlet-api")
	optional("junit:junit")
	optional("org.apache.httpcomponents.client5:httpclient5")
	optional("org.assertj:assertj-core")
	optional("org.hamcrest:hamcrest-core")
	optional("org.hamcrest:hamcrest-library")
	optional("org.junit.jupiter:junit-jupiter-api")
	optional("org.mockito:mockito-core")
	optional("org.skyscreamer:jsonassert")
	optional("org.springframework:spring-web")
	optional("org.springframework:spring-webflux")
	optional("org.springframework.graphql:spring-graphql-test")

	testImplementation(project(":spring-boot-project:spring-boot-tools:spring-boot-test-support"))
	testImplementation("ch.qos.logback:logback-classic")
	testImplementation("io.mockk:mockk")
	testImplementation("jakarta.json:jakarta.json-api")
	testImplementation("org.apache.groovy:groovy")
	testImplementation("org.apache.groovy:groovy-xml")
	testImplementation("org.eclipse:yasson")
	testImplementation("org.jetbrains.kotlin:kotlin-reflect")
	testImplementation("org.jetbrains.kotlin:kotlin-stdlib")
	testImplementation("org.slf4j:slf4j-api")
	testImplementation("org.spockframework:spock-core")
	testImplementation("org.springframework:spring-webmvc")
	testImplementation("org.testng:testng")

	testRuntimeOnly("org.junit.vintage:junit-vintage-engine")
}

